# version: 2
# jobs:
#   build:
#     docker:
#       - image: circleci/android:api-26-alpha
#     steps:
#       - run:
#           name: Setup emulator
#           command: sdkmanager "system-images;android-22;default;armeabi-v7a" && echo "yes" | avdmanager create avd -n test -k "system-images;android-22;default;armeabi-v7a"
      
#       - run:
#           name: Launch emulator
#           command: export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib && emulator64-arm -avd test -noaudio -no-boot-anim -no-window -accel on
#           background: true
#       - run:
#           name: Run Tests
#           command: ./gradlew :demo:connectedAndroidTest



#   # environment:
#   #   #Necessary for the Android SDKs to function properly. Also useful for booting up the emulator in later steps
#   #   ANDROID_HOME: /home/ubuntu/android
#   #   GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError"'
#   #   TEST_FLAGS: "--configure-on-demand -PdisablePreDex"
#   #   ADB_INSTALL_TIMEOUT: "10"




# version: 2
# jobs:
#   build:
#     working_directory: ~/code/UI-test/AndroidDemo/AndroidDemo
#     docker:
#       - image: circleci/android:api-28-alpha
#     environment:
#       JVM_OPTS: -Xmx3200m
#     steps:
#       - checkout:
#           # path: ~/code/AndroidDemo
#       # - restore_cache:
#       #     key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
#       - run:
#          name: Chmod permissions
#         #  command: sudo chmod +x ./gradlew
#          command: ls
#       - run:
#           name: Download Dependencies
#           command: ./gradlew androidDependencies
#       - save_cache:
#           paths:
#             - ~/.gradle
#           key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
#       - run:
#           name: Lists installed targets
#           command: android list target
#           environment:
#           TERM: dumb
#       - run:
#           name: Show list of system-images
#           command: sdkmanager --list --verbose | grep system-images
#       - run:
#           name: Setup Emulator
#           command: sdkmanager "system-images;android-21;default;armeabi-v7a" && echo "no" | avdmanager create avd -n test -k "system-images;android-21;default;armeabi-v7a"
#       - run:
#           name: Launch Emulator
#           command: |
#                   cd ${ANDROID_HOME}/emulator;ls
#                   export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib
#                   emulator -avd test -no-window -noaudio -no-boot-anim -no-window -accel on
#           background: true
#       - run:
#           name: Wait emulator
#           command: |
#               circle-android wait-for-boot
#               adb shell input keyevent 82
#       - run:
#           name: Run Espresso UI Tests
#           command: ./gradlew :app:connectedDebugAndroidTest
#       - store_artifacts:
#           path: app/build/reports
#           destination: reports
#       - store_test_results:
#           path: app/build/test-results



machine:
  environment:
    PATH: "~/$CIRCLE_PROJECT_REPONAME/gradle-2.9/bin:$PATH"
    TERM: "dumb"
    ADB_INSTALL_TIMEOUT: "10"
    GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError"'

dependencies:
  pre:
    - wget "https://services.gradle.org/distributions/gradle-2.9-bin.zip"; unzip gradle-2.9-bin.zip
    - echo y | android update sdk --no-ui --all --filter tool,extra-android-m2repository,extra-android-support,extra-google-google_play_services,extra-google-m2repository,android-23
    - echo y | android update sdk --no-ui --all --filter build-tools-23.0.2

test:
  override:
    # start the emulator
    - emulator -avd circleci-android22 -no-audio -no-window:
        background: true
        parallel: true
    # wait for it to have booted
    - circle-android wait-for-boot
    # unlock the emulator screen
    - sleep 30
    - adb shell input keyevent 82
    # run tests  against the emulator.
    - ./gradlew connectedAndroidTest -PdisablePreDex
    # copy the build outputs to artifacts
    - cp -r app/build/outputs $CIRCLE_ARTIFACTS
    # copy the test results to the test results directory.
    - cp -r app/build/outputs/androidTest-results/* $CIRCLE_TEST_REPORTS
